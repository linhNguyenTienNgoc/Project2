package com.coffeeshop.shopcoffeemanagement.controller;

import com.coffeeshop.shopcoffeemanagement.CoffeeShopApplication;
import com.coffeeshop.shopcoffeemanagement.model.CoffeeTable;
import javafx.fxml.FXML;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.scene.text.TextAlignment;


import com.coffeeshop.shopcoffeemanagement.dao.CoffeeTableDAO;
import com.coffeeshop.shopcoffeemanagement.controller.OrderController;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class TablesController {
    
    @FXML
    private GridPane tablesGrid;
    
    @FXML
    private Button addTableButton;
    
    @FXML
    private Button refreshButton;
    
    @FXML
    private TextField searchField;
    
    @FXML
    private ComboBox<String> statusFilter;
    
    private List<CoffeeTable> tables;
    private CoffeeTableDAO tableDAO;
    
    @FXML
    public void initialize() {
        tableDAO = new CoffeeTableDAO();
        setupFilters();
        loadTables();
        displayTables();
    }
    
    private void setupFilters() {
        // Setup status filter
        statusFilter.getItems().addAll("T·∫•t c·∫£", "Tr·ªëng", "C√≥ kh√°ch", "ƒê√£ ƒë·∫∑t", "ƒêang d·ªçn");
        statusFilter.setValue("T·∫•t c·∫£");
        
        // Setup search field
        searchField.setPromptText("T√¨m ki·∫øm b√†n...");
        searchField.textProperty().addListener((observable, oldValue, newValue) -> {
            filterTables();
        });
        
        // Setup status filter
        statusFilter.valueProperty().addListener((observable, oldValue, newValue) -> {
            filterTables();
        });
    }
    
    private void filterTables() {
        String searchText = searchField.getText().toLowerCase();
        String selectedStatus = statusFilter.getValue();
        
        List<CoffeeTable> filteredTables = tables.stream()
            .filter(table -> {
                // Filter by search text
                boolean matchesSearch = table.getTableNumber().toLowerCase().contains(searchText) ||
                                      table.getLocation().toLowerCase().contains(searchText);
                
                // Filter by status
                boolean matchesStatus = "T·∫•t c·∫£".equals(selectedStatus) ||
                                      getStatusText(table.getStatus()).equals(selectedStatus);
                
                return matchesSearch && matchesStatus;
            })
            .collect(java.util.stream.Collectors.toList());
        
        displayFilteredTables(filteredTables);
    }
    
    private void displayFilteredTables(List<CoffeeTable> filteredTables) {
        tablesGrid.getChildren().clear();
        
        int columns = 5; // S·ªë c·ªôt hi·ªÉn th·ªã
        int row = 0;
        int col = 0;
        
        for (CoffeeTable table : filteredTables) {
            VBox tableNode = createTableNode(table);
            tablesGrid.add(tableNode, col, row);
            
            col++;
            if (col >= columns) {
                col = 0;
                row++;
            }
        }
    }
    
    @FXML
    private void refreshTables() {
        loadTables();
        displayTables();
    }
    
    @FXML
    private void showAddTableDialog() {
        // TODO: Implement add table dialog
        CoffeeShopApplication.showInfo("Th√¥ng b√°o", "T√≠nh nƒÉng th√™m b√†n s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn sau");
    }
    
    private void loadTables() {
        try {
            tables = tableDAO.findAll();
            if (tables == null || tables.isEmpty()) {
                CoffeeShopApplication.showInfo("Th√¥ng b√°o", "Ch∆∞a c√≥ b√†n n√†o trong h·ªá th·ªëng. Vui l√≤ng th√™m b√†n m·ªõi.");
                tables = new ArrayList<>();
            }
        } catch (Exception e) {
            e.printStackTrace();
            CoffeeShopApplication.showError("L·ªói", "Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√†n: " + e.getMessage());
            tables = new ArrayList<>();
        }
    }
    
    private void displayTables() {
        tablesGrid.getChildren().clear();
        
        int columns = 5; // S·ªë c·ªôt hi·ªÉn th·ªã
        int row = 0;
        int col = 0;
        
        for (CoffeeTable table : tables) {
            VBox tableNode = createTableNode(table);
            tablesGrid.add(tableNode, col, row);
            
            col++;
            if (col >= columns) {
                col = 0;
                row++;
            }
        }
    }
    
    private VBox createTableNode(CoffeeTable table) {
        VBox container = new VBox(5);
        container.setAlignment(Pos.CENTER);
        container.setPadding(new Insets(10));
        container.getStyleClass().add("table-item");
        
        // Th√™m class CSS d·ª±a tr√™n tr·∫°ng th√°i
        String status = table.getStatus();
        if ("OCCUPIED".equals(status)) {
            container.getStyleClass().add("occupied");
        } else if ("AVAILABLE".equals(status)) {
            container.getStyleClass().add("available");
        } else if ("RESERVED".equals(status)) {
            container.getStyleClass().add("reserved");
        }
        
        // T·∫°o h√¨nh b√†n (Rectangle thay v√¨ Circle)
        Rectangle tableShape = createTableShape(table);
        
        // T·∫°o text hi·ªÉn th·ªã s·ªë b√†n
        Text tableNumber = new Text(table.getTableNumber());
        tableNumber.setFont(Font.font("System", FontWeight.BOLD, 16));
        tableNumber.setFill(Color.WHITE);
        tableNumber.setTextAlignment(TextAlignment.CENTER);
        
        // T·∫°o text hi·ªÉn th·ªã tr·∫°ng th√°i
        Text statusText = new Text(getStatusText(status));
        statusText.setFont(Font.font("System", 12));
        statusText.setTextAlignment(TextAlignment.CENTER);
        
        // T·∫°o text hi·ªÉn th·ªã s·ª©c ch·ª©a
        Text capacityText = new Text("S·ª©c ch·ª©a: " + table.getCapacity() + " ng∆∞·ªùi");
        capacityText.setFont(Font.font("System", 10));
        capacityText.setTextAlignment(TextAlignment.CENTER);
        
        // T·∫°o text hi·ªÉn th·ªã v·ªã tr√≠
        Text locationText = new Text(table.getLocation());
        locationText.setFont(Font.font("System", 10));
        locationText.setTextAlignment(TextAlignment.CENTER);
        locationText.setWrappingWidth(120);
        
        // Th√™m c√°c th√†nh ph·∫ßn v√†o container
        StackPane tablePane = new StackPane();
        tablePane.getChildren().addAll(tableShape, tableNumber);
        
        container.getChildren().addAll(tablePane, statusText, capacityText, locationText);
        
        // Th√™m event handler
        container.setOnMouseClicked(e -> handleTableClick(table));
        
        return container;
    }
    
    private Rectangle createTableShape(CoffeeTable table) {
        Rectangle rectangle = new Rectangle();
        
        // K√≠ch th∆∞·ªõc d·ª±a tr√™n s·ª©c ch·ª©a
        int capacity = table.getCapacity();
        if (capacity <= 4) {
            rectangle.setWidth(80);
            rectangle.setHeight(60);
        } else if (capacity <= 6) {
            rectangle.setWidth(100);
            rectangle.setHeight(70);
        } else {
            rectangle.setWidth(120);
            rectangle.setHeight(80);
        }
        
        // M√†u s·∫Øc d·ª±a tr√™n tr·∫°ng th√°i
        String status = table.getStatus();
        if ("OCCUPIED".equals(status)) {
            rectangle.setFill(Color.rgb(231, 76, 60)); // ƒê·ªè
        } else if ("AVAILABLE".equals(status)) {
            rectangle.setFill(Color.rgb(39, 174, 96)); // Xanh l√°
        } else if ("RESERVED".equals(status)) {
            rectangle.setFill(Color.rgb(243, 156, 18)); // Cam
        } else {
            rectangle.setFill(Color.rgb(149, 165, 166)); // X√°m
        }
        
        rectangle.setArcWidth(10);
        rectangle.setArcHeight(10);
        rectangle.setStroke(Color.WHITE);
        rectangle.setStrokeWidth(2);
        
        return rectangle;
    }
    
    private String getStatusText(String status) {
        switch (status) {
            case "AVAILABLE":
                return "Tr·ªëng";
            case "OCCUPIED":
                return "C√≥ kh√°ch";
            case "RESERVED":
                return "ƒê√£ ƒë·∫∑t";
            case "CLEANING":
                return "ƒêang d·ªçn";
            default:
                return "Kh√¥ng x√°c ƒë·ªãnh";
        }
    }
    
    private void handleTableClick(CoffeeTable table) {
        if ("AVAILABLE".equals(table.getStatus())) {
            // B√†n tr·ªëng - cho ph√©p ƒë·∫∑t h√†ng
            showQuickOrderOptions(table);
        } else if ("OCCUPIED".equals(table.getStatus())) {
            // B√†n c√≥ kh√°ch - hi·ªÉn th·ªã th√¥ng tin ƒë∆°n h√†ng
            showTableDetails(table);
        } else if ("RESERVED".equals(table.getStatus())) {
            // B√†n ƒë√£ ƒë·∫∑t - hi·ªÉn th·ªã th√¥ng tin ƒë·∫∑t b√†n
            showReservationDetails(table);
        }
    }
    
    private void showQuickOrderOptions(CoffeeTable table) {
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("B√†n " + table.getTableNumber());
        alert.setHeaderText("Ch·ªçn h√†nh ƒë·ªông");
        alert.setContentText("B√†n " + table.getTableNumber() + " - " + table.getCapacity() + " ng∆∞·ªùi\n" +
                           "V·ªã tr√≠: " + table.getLocation() + "\n\n" +
                           "B·∫°n mu·ªën l√†m g√¨ v·ªõi b√†n n√†y?");
        
        ButtonType quickOrderButton = new ButtonType("‚ö° ƒê·∫∑t h√†ng nhanh");
        ButtonType fullOrderButton = new ButtonType("üìã ƒê·∫∑t h√†ng ƒë·∫ßy ƒë·ªß");
        ButtonType occupyButton = new ButtonType("‚úÖ Ch·ªâ ƒë·∫∑t b√†n");
        ButtonType cancelButton = new ButtonType("‚ùå H·ªßy");
        
        alert.getButtonTypes().setAll(quickOrderButton, fullOrderButton, occupyButton, cancelButton);
        
        Optional<ButtonType> result = alert.showAndWait();
        if (result.isPresent()) {
            ButtonType selectedButton = result.get();
            if (selectedButton == quickOrderButton) {
                showQuickOrderDialog(table);
            } else if (selectedButton == fullOrderButton) {
                openOrderScreen(table);
            } else if (selectedButton == occupyButton) {
                occupyTable(table);
            }
        }
    }
    
    private void showQuickOrderDialog(CoffeeTable table) {
        Dialog<Void> dialog = new Dialog<>();
        dialog.setTitle("ƒê·∫∑t h√†ng nhanh - B√†n " + table.getTableNumber());
        dialog.setHeaderText("Ch·ªçn m√≥n ph·ªï bi·∫øn");
        
        VBox content = new VBox(15);
        content.setPadding(new Insets(20));
        
        // Popular items - hardcoded for now
        String[] popularItems = {
            "C√† ph√™ ƒëen", "C√† ph√™ s·ªØa", "Cappuccino", "Latte",
            "Tr√† s·ªØa tr√¢n ch√¢u", "N∆∞·ªõc √©p cam", "B√°nh tiramisu", "B√°nh cheesecake"
        };
        
        GridPane quickGrid = new GridPane();
        quickGrid.setHgap(10);
        quickGrid.setVgap(10);
        
        int col = 0;
        int row = 0;
        for (String itemName : popularItems) {
            VBox itemBox = createQuickOrderItem(itemName);
            quickGrid.add(itemBox, col, row);
            
            col++;
            if (col >= 4) {
                col = 0;
                row++;
            }
        }
        
        content.getChildren().add(quickGrid);
        dialog.getDialogPane().setContent(content);
        
        ButtonType fullMenuButton = new ButtonType("üìã Xem menu ƒë·∫ßy ƒë·ªß");
        ButtonType closeButton = new ButtonType("ƒê√≥ng");
        dialog.getDialogPane().getButtonTypes().addAll(fullMenuButton, closeButton);
        
        dialog.setResultConverter(dialogButton -> {
            if (dialogButton == fullMenuButton) {
                openOrderScreen(table);
            }
            return null;
        });
        
        dialog.showAndWait();
    }
    
    private VBox createQuickOrderItem(String itemName) {
        VBox container = new VBox(5);
        container.setAlignment(Pos.CENTER);
        container.setPadding(new Insets(10));
        container.setStyle("-fx-background-color: #e8f5e8; -fx-background-radius: 8; -fx-border-color: #27ae60; -fx-border-radius: 8; -fx-border-width: 1;");
        
        Label nameLabel = new Label(itemName);
        nameLabel.setFont(Font.font("System", FontWeight.BOLD, 12));
        nameLabel.setStyle("-fx-text-fill: #2c3e50;");
        nameLabel.setWrapText(true);
        nameLabel.setTextAlignment(TextAlignment.CENTER);
        
        Button addBtn = new Button("Th√™m");
        addBtn.setStyle("-fx-background-color: #27ae60; -fx-text-fill: white; -fx-font-weight: bold; -fx-background-radius: 15;");
        addBtn.setOnAction(e -> {
            // TODO: Implement quick order logic
            CoffeeShopApplication.showInfo("Th√†nh c√¥ng", "ƒê√£ th√™m " + itemName + " v√†o ƒë∆°n h√†ng nhanh");
        });
        
        container.getChildren().addAll(nameLabel, addBtn);
        
        return container;
    }
    
    private void showOrderDialog(CoffeeTable table) {
        String message = "B√†n " + table.getTableNumber() + "\n" +
                        "S·ª©c ch·ª©a: " + table.getCapacity() + " ng∆∞·ªùi\n" +
                        "V·ªã tr√≠: " + table.getLocation() + "\n\n" +
                        "B·∫°n c√≥ mu·ªën t·∫°o ƒë∆°n h√†ng cho b√†n n√†y kh√¥ng?";
        
        CoffeeShopApplication.showConfirmation("ƒê·∫∑t h√†ng cho b√†n " + table.getTableNumber(), 
            message, () -> openOrderScreen(table));
    }
    
    private void showTableDetails(CoffeeTable table) {
        String message = "B√†n " + table.getTableNumber() + " ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng.\n" +
                        "S·ª©c ch·ª©a: " + table.getCapacity() + " ng∆∞·ªùi\n" +
                        "V·ªã tr√≠: " + table.getLocation() + "\n\n" +
                        "B·∫°n c√≥ mu·ªën xem chi ti·∫øt ƒë∆°n h√†ng kh√¥ng?";
        
        CoffeeShopApplication.showConfirmation("Th√¥ng tin b√†n " + table.getTableNumber(), 
            message, () -> viewTableDetails(table));
    }
    
    private void showReservationDetails(CoffeeTable table) {
        String message = "B√†n " + table.getTableNumber() + " ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t tr∆∞·ªõc.\n" +
                        "S·ª©c ch·ª©a: " + table.getCapacity() + " ng∆∞·ªùi\n" +
                        "V·ªã tr√≠: " + table.getLocation();
        
        CoffeeShopApplication.showInfo("Th√¥ng tin ƒë·∫∑t b√†n " + table.getTableNumber(), message);
    }
    
    private void openOrderScreen(CoffeeTable selectedTable) {
        try {
            // L∆∞u b√†n ƒë∆∞·ª£c ch·ªçn v√†o application context
            CoffeeShopApplication.setSelectedTable(selectedTable);
            
            // Chuy·ªÉn sang m√†n h√¨nh ƒë·∫∑t h√†ng
            javafx.fxml.FXMLLoader loader = new javafx.fxml.FXMLLoader(getClass().getResource("/fxml/order.fxml"));
            javafx.scene.Parent orderRoot = loader.load();
            
            // L·∫•y controller c·ªßa m√†n h√¨nh order
            OrderController orderController = loader.getController();
            
            // T·∫°o scene m·ªõi
            javafx.scene.Scene orderScene = new javafx.scene.Scene(orderRoot);
            orderScene.getStylesheets().add(getClass().getResource("/css/main.css").toExternalForm());
            
            // L·∫•y stage hi·ªán t·∫°i v√† thay ƒë·ªïi scene
            javafx.stage.Stage currentStage = (javafx.stage.Stage) tablesGrid.getScene().getWindow();
            currentStage.setScene(orderScene);
            currentStage.setTitle("ƒê·∫∑t h√†ng - B√†n " + selectedTable.getTableNumber());
            
        } catch (Exception e) {
            e.printStackTrace();
            CoffeeShopApplication.showError("L·ªói", "Kh√¥ng th·ªÉ m·ªü m√†n h√¨nh ƒë·∫∑t h√†ng: " + e.getMessage());
        }
    }
    
    private void occupyTable(CoffeeTable table) {
        try {
            if (tableDAO.updateStatus(table.getId(), "OCCUPIED")) {
                table.setStatus("OCCUPIED");
                displayTables(); // Refresh display
                CoffeeShopApplication.showInfo("Th√†nh c√¥ng", "ƒê√£ ƒë·∫∑t b√†n " + table.getTableNumber());
            } else {
                CoffeeShopApplication.showError("L·ªói", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i b√†n");
            }
        } catch (Exception e) {
            e.printStackTrace();
            CoffeeShopApplication.showError("L·ªói", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i b√†n: " + e.getMessage());
        }
    }
    
    private void viewTableDetails(CoffeeTable table) {
        // Hi·ªÉn th·ªã dialog v·ªõi c√°c t√πy ch·ªçn cho b√†n c√≥ kh√°ch
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("Qu·∫£n l√Ω b√†n " + table.getTableNumber());
        alert.setHeaderText("B√†n ƒëang c√≥ kh√°ch");
        alert.setContentText("B√†n " + table.getTableNumber() + " - " + table.getCapacity() + " ng∆∞·ªùi\n" +
                           "V·ªã tr√≠: " + table.getLocation() + "\n\n" +
                           "Ch·ªçn h√†nh ƒë·ªông:");
        
        ButtonType viewOrderButton = new ButtonType("üìã Xem ƒë∆°n h√†ng");
        ButtonType addMoreButton = new ButtonType("‚ûï Th√™m m√≥n");
        ButtonType checkoutButton = new ButtonType("üí≥ Thanh to√°n");
        ButtonType freeTableButton = new ButtonType("üîÑ Gi·∫£i ph√≥ng b√†n");
        ButtonType cancelButton = new ButtonType("‚ùå ƒê√≥ng");
        
        alert.getButtonTypes().setAll(viewOrderButton, addMoreButton, checkoutButton, freeTableButton, cancelButton);
        
        Optional<ButtonType> result = alert.showAndWait();
        if (result.isPresent()) {
            ButtonType selectedButton = result.get();
            if (selectedButton == viewOrderButton) {
                showOrderDetails(table);
            } else if (selectedButton == addMoreButton) {
                openOrderScreen(table);
            } else if (selectedButton == checkoutButton) {
                processCheckout(table);
            } else if (selectedButton == freeTableButton) {
                freeTable(table);
            }
        }
    }
    
    private void showOrderDetails(CoffeeTable table) {
        // TODO: Hi·ªÉn th·ªã chi ti·∫øt ƒë∆°n h√†ng hi·ªán t·∫°i
        CoffeeShopApplication.showInfo("Chi ti·∫øt ƒë∆°n h√†ng", 
            "ƒê∆°n h√†ng cho b√†n " + table.getTableNumber() + "\n\n" +
            "T√≠nh nƒÉng xem chi ti·∫øt ƒë∆°n h√†ng s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn sau.");
    }
    
    private void processCheckout(CoffeeTable table) {
        CoffeeShopApplication.showConfirmation("Thanh to√°n", 
            "X√°c nh·∫≠n thanh to√°n cho b√†n " + table.getTableNumber() + "?\n\n" +
            "Sau khi thanh to√°n, b√†n s·∫Ω ƒë∆∞·ª£c gi·∫£i ph√≥ng.", 
            () -> {
                try {
                    if (tableDAO.updateStatus(table.getId(), "AVAILABLE")) {
                        table.setStatus("AVAILABLE");
                        displayTables(); // Refresh display
                        CoffeeShopApplication.showInfo("Th√†nh c√¥ng", 
                            "ƒê√£ thanh to√°n v√† gi·∫£i ph√≥ng b√†n " + table.getTableNumber());
                    } else {
                        CoffeeShopApplication.showError("L·ªói", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i b√†n");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    CoffeeShopApplication.showError("L·ªói", "Kh√¥ng th·ªÉ x·ª≠ l√Ω thanh to√°n: " + e.getMessage());
                }
            });
    }
    
    private void freeTable(CoffeeTable table) {
        CoffeeShopApplication.showConfirmation("Gi·∫£i ph√≥ng b√†n", 
            "X√°c nh·∫≠n gi·∫£i ph√≥ng b√†n " + table.getTableNumber() + "?\n\n" +
            "B√†n s·∫Ω ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† tr·ªëng.", 
            () -> {
                try {
                    if (tableDAO.updateStatus(table.getId(), "AVAILABLE")) {
                        table.setStatus("AVAILABLE");
                        displayTables(); // Refresh display
                        CoffeeShopApplication.showInfo("Th√†nh c√¥ng", 
                            "ƒê√£ gi·∫£i ph√≥ng b√†n " + table.getTableNumber());
                    } else {
                        CoffeeShopApplication.showError("L·ªói", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i b√†n");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    CoffeeShopApplication.showError("L·ªói", "Kh√¥ng th·ªÉ gi·∫£i ph√≥ng b√†n: " + e.getMessage());
                }
            });
    }
} 